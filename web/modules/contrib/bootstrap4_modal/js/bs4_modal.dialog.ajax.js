/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal) {
  Drupal.behaviors.bs4_modal = {
    attach: function attach(context, settings) {
      var $context = $(context);
      var self = this;

      if (!$('#drupal-bootstrap4-modal').length) {
        $('<div id="drupal-bootstrap4-modal" class="bs4-modal modal fade" tabindex="-1" role="dialog"><div class="modal-dialog" role="document"><div class="modal-content"></div></div></div>').hide().appendTo('body');
      }

      var $dialog = $context.closest('.modal-content');
      if ($dialog.length) {
        var dialogSettings = $dialog.closest('.bs4-modal').data('settings');
        if (dialogSettings && dialogSettings.drupalAutoButtons) {
          $dialog.trigger('dialogButtonsChange');
        }
      }

      var originalClose = settings.bs4_modal_dialog.close;

      settings.bs4_modal_dialog.close = function (event) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        originalClose.apply(settings.bs4_modal_dialog, [event].concat(args));
        $(event.target).remove();
      };
    },
    prepareDialogButtons: function prepareDialogButtons($dialog) {
      var buttons = [];
      var $buttons = $dialog.find('.form-actions input[type=submit], .form-actions button[type=submit], .form-actions a.button');
      $buttons.each(function () {
        var $originalButton = $(this).css({ display: 'none' });
        buttons.push({
          text: $originalButton.html() || $originalButton.attr('value'),
          class: $originalButton.attr('class'),
          click: function click(e) {
            if ($originalButton.is('a')) {
              $originalButton[0].click();
            } else {
              $originalButton.trigger('mousedown').trigger('mouseup').trigger('click');
              e.preventDefault();
            }
          }
        });
      });
      return buttons;
    }
  };

  Drupal.AjaxCommands.prototype.openBootstrap4Dialog = function (ajax, response, status) {
    if (!response.selector) {
      return false;
    }
    var $dialog = $(response.selector);
    if (!$dialog.length) {
      $dialog = $('<div id="' + response.selector.replace(/^#/, '') + '" class="modal fade" tabindex="-1" role="dialog"><div class="modal-dialog" role="document"><div class="modal-content"></div></div></div>').hide().appendTo('body');
    }

    if (!ajax.wrapper) {
      response.selector = response.selector.toString() + ' .modal-content';
    }

    response.command = 'insert';
    response.method = 'html';

    if (response.dialogOptions.modalDialogWrapBody === undefined || (response.dialogOptions.modalDialogWrapBody === true || response.dialogOptions.modalDialogWrapBody == 'true')) {
      response.data = '<div class="modal-body">' + response.data + '</div>';
    }

    ajax.commands.insert(ajax, response, status);

    if (!response.dialogOptions.drupalAutoButtons || response.dialogOptions.drupalAutoButtons !== 'false') {
      response.dialogOptions.drupalAutoButtons = true;
      if (response.dialogOptions.buttons === undefined || response.dialogOptions.buttons.length <= 0) {
        response.dialogOptions.buttons = Drupal.behaviors.bs4_modal.prepareDialogButtons($dialog);
      }
    } else {
      response.dialogOptions.drupalAutoButtons = false;
    }

    $dialog.on('dialogButtonsChange', function () {
      var buttons = Drupal.behaviors.bs4_modal.prepareDialogButtons($dialog);

      var dialog = Drupal.bs4_modal($dialog.get(0));
      dialog.updateButtons(buttons);
    });

    response.dialogOptions = response.dialogOptions || {};
    var dialog = Drupal.bs4_modal($dialog.get(0), response.dialogOptions);
    if (response.dialogOptions.modal) {
      dialog.showModal();
    } else {
      dialog.show();
    }

    $dialog.parent().find('.ui-dialog-buttonset').addClass('form-actions');
  };

  Drupal.AjaxCommands.prototype.closeBootstrap4Dialog = function (ajax, response, status) {
    var $dialog = $(response.selector);
    if ($dialog.length) {
      Drupal.bs4_modal($dialog.get(0)).close();
    }

    $dialog.off('dialogButtonsChange');
  };

  Drupal.AjaxCommands.prototype.setBootstrap4DialogOption = function (ajax, response, status) {
    var $dialog = $(response.selector);
    if ($dialog.length) {
      // $dialog.dialog('option', response.optionName, response.optionValue);
    }
  };

  $(window).on('dialog:aftercreate', function (e, dialog, $element, settings) {
    $element.on('click.dialog', '.dialog-cancel', function (e) {
      dialog.close('cancel');
      e.preventDefault();
      e.stopPropagation();
    });
  });

  $(window).on('dialog:beforeclose', function (e, dialog, $element) {
    $element.off('.dialog');
  });
})(jQuery, Drupal);
