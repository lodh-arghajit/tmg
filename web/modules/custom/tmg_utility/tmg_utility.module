<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\encrypt\Entity\EncryptionProfile;
use Drupal\tmg_utility\Form\VerificationForm;
use Drupal\tmg_utility\Form\UserPasswordResetForm;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Drupal\Core\Url;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Component\Render\PlainTextOutput;

/**
 * Implements hook_form_alter().
 */
function tmg_utility_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  switch ($form_id) {
    case 'webform_submission_verification_process_add_form':
      $form = VerificationForm::alter($form, $form_state);
      break;
    case 'webform_submission_user_password_reset_add_form':
      $form = UserPasswordResetForm::alter($form, $form_state);
      break;
    case 'feeds_feed_cpc_import_form':
      unset($form['plugin']['parser']['no_headers']);
      unset($form['plugin']['parser']['delimiter']);
      unset($form['author']);
      unset( $form['created']);
      unset( $form['uid']);
      unset( $form['actions']['submit']);
      $form['actions']['import']['#value'] = "Import CPC data";
      $form['actions']['import']['#dropbutton'] = FALSE;
      $form['#disable_inline_form_errors_summary'] = TRUE;
      unset($form['options']);
      break;
    case 'views_exposed_form':
      $view = $form_state->get('view');
      if ($view->id() == "cpc_data_list") {


        $form["field_cpc_id_num_value"]['#states'] = [
          'disabled' => array(
            array(':input[name="field_company_name_value"]' => array('filled' => TRUE)),
            array(':input[name="field_wholesale_id_value"]' => array('filled' => TRUE)),
          ),

        ];
        $form["field_company_name_value"]['#states'] = [
          'disabled' => array(
            array(':input[name="field_cpc_id_num_value"]' => array('filled' => TRUE)),
            array(':input[name="field_wholesale_id_value"]' => array('filled' => TRUE)),
          ),

        ];

        $form["field_wholesale_id_value"]['#states'] = [
          'disabled' => array(
            array(':input[name="field_cpc_id_num_value"]' => array('filled' => TRUE)),
            array(':input[name="field_company_name_value"]' => array('filled' => TRUE)),
          ),

        ];

      }

  }
}

/**
 * Implements hook_tokens().
 */
function tmg_utility_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type === 'user' && !empty($data['user'])) {
    $user = $data['user'];
    $admin_user = $data['admin_user'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'forget_password_url':
          $request_time = \Drupal::time()->getCurrentTime();
          $encryption_profile = EncryptionProfile::load("site_encrypt_decrypt_profile");
          if (!$encryption_profile) {
            throw new AccessDeniedHttpException();
          }
          $data = $user->id() . ":" . $request_time;
          $hash  = \Drupal::service('encryption')->encrypt($data, $encryption_profile);

          $url = Url::fromRoute('tmg_utility.reset',
            [
              'hash' => $hash,
            ],
            [
              'absolute' => TRUE,
            ]
          )->toString();
          $replacements[$original] = $url;
          break;

        case 'admin_approve_url':
          $request_time = \Drupal::time()->getCurrentTime();
          $encryption_profile = EncryptionProfile::load("site_encrypt_decrypt_profile");
          if (!$encryption_profile) {
            throw new AccessDeniedHttpException();
          }
          $data = $admin_user->id() . ":" . $request_time;
          $hash  = \Drupal::service('encryption')->encrypt($data, $encryption_profile);

          $url = Url::fromRoute('tmg_utility.admin_auto_login',
            [
              'hash' => $hash,
            ],
            [
              'absolute' => TRUE,
            ]
          )->toString();
          $replacements[$original] = $url;
          break;
        case 'email_activation_link':
          $request_time = \Drupal::time()->getCurrentTime();
          $encryption_profile = EncryptionProfile::load("site_encrypt_decrypt_profile");
          if (!$encryption_profile) {
            throw new AccessDeniedHttpException();
          }
          $data = $user->id() . ":" . $request_time;
          $hash  = \Drupal::service('encryption')->encrypt($data, $encryption_profile);

          $url = Url::fromRoute('tmg_utility.email_activation',
            [
              'hash' => $hash,
            ],
            [
              'absolute' => TRUE,
            ]
          )->toString();
          $replacements[$original] = $url;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_token_info().
 */
function tmg_utility_token_info_alter(&$data) {
  $data['tokens']['user']['forget_password_url'] = [
    'name' => t("Forget password link"),
    'description' => t("Tokens related to forget password link."),
    'needs-data' => 'user',
  ];
  $data['tokens']['user']['admin_approve_url'] = [
    'name' => t("Admin user approve url."),
    'description' => t("Admin user approve url."),
    'needs-data' => 'user',
  ];
  $data['tokens']['user']['email_activation_link'] = [
    'name' => t("Admin user approve url."),
    'description' => t("Admin user approve url."),
    'needs-data' => 'user',
  ];
}

/**
 * Implements hook_mail().
 */
function tmg_utility_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  $language_manager = \Drupal::languageManager();
  $langcode = $message['langcode'];
  $variables = ['user' => $params['account'], 'admin_user' => $params['admin_user']];

  $language = $language_manager->getLanguage($langcode);
  $original_language = $language_manager->getConfigOverrideLanguage();
  $language_manager->setConfigOverrideLanguage($language);
  $mail_config = \Drupal::config('user.mail');

  $token_options = ['langcode' => $langcode, 'callback' => 'user_mail_tokens', 'clear' => TRUE];
  $message['subject'] .= PlainTextOutput::renderFromHtml($token_service->replace($mail_config->get($key . '.subject'), $variables, $token_options));
  $message['body'][] = $token_service->replace($mail_config->get($key . '.body'), $variables, $token_options);

  $language_manager->setConfigOverrideLanguage($original_language);

}
